# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.9

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}

    steps:
      - checkout
      # specify any bash command here prefixed with `run: `
      # - run: go get -v -t -d ./...
      # - run: go test -v ./...
      - run: go get github.com/kiedveian/JDExam/fops
      - run: go test github.com/kiedveian/JDExam/fops
      - run: go build -o bin/fops -ldflags "-X main.Version=v0.0.1" github.com/kiedveian/JDExam/fops

      - persist_to_workspace:
          root: bin
          paths:
            - fops

  test:
    docker:
      # specify the version
      - image: circleci/golang:1.9

    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}

    environment: # environment variables for the build itself
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved

    steps:
      - attach_workspace:
            at: bin

      - run: mkdir -p $TEST_RESULTS # create the test results directory
      - run: bin/fops -h
      - run: bin/fops -h > $TEST_RESULTS/help.txt
      - run: bin/fops version
      - run: bin/fops version > $TEST_RESULTS/version.txt
      - store_artifacts:
          path: /tmp/test-results

      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results

  publish-github-release:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}

    steps:
      - attach_workspace:
          at: bin
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            VERSION=$(bin/fops version)
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./bin/

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - publish-github-release:
          requires:
            - build
